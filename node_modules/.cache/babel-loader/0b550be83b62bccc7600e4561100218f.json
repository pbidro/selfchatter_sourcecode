{"ast":null,"code":"//importo el componente donde tengo el logo y el nombre de la app\nimport TitleLogo from \"../components/TitleLogo.vue\";\nconst __default__ = {\n  name: \"App\",\n  components: {\n    TitleLogo\n  },\n\n  data() {\n    return {\n      mensajes: [],\n      newMessage: \"\",\n      editMessage: \"\"\n    };\n  },\n\n  methods: { ...mapActions([\"instanceFirestore\", \"getMe\"]),\n\n    initFirestore() {\n      this.instanceFirestore(getFirestore);\n    },\n\n    checkFirestore() {\n      this.testeo();\n    },\n\n    //añadir nuevos elementos a firestore siempre cuando algo sea escrito en el mensaje (en este caso no valide los trim son las 2:14 tengo sueño)\n    async addMessage(objeto) {\n      if (this.newMessage != \"\") {\n        const db = getFirestore();\n        await addDoc(collection(db, \"mensajes\"), objeto);\n        ElMessage({\n          message: \"Mensaje enviado\",\n          type: \"success\"\n        });\n      } else {\n        ElMessage({\n          message: \"Mensaje no puede estar en blanco\",\n          type: \"error\"\n        });\n      }\n    },\n\n    //eliminar elemenntos de firestore utilizando el identificador iterado\n    async delMessage(Identifier) {\n      const db = getFirestore();\n      await deleteDoc(doc(db, \"mensajes\", Identifier));\n      ElMessage({\n        message: \"Mensaje eliminado\",\n        type: \"success\"\n      });\n    },\n\n    //metodo que sirve para asignar de forma dinamica el contenido del cuadro de texto de edición con el mensaje iterado seleccionado\n    setEditMessage(Message) {\n      this.editMessage = Message;\n    },\n\n    //editar elementos de firestore utilizando el identificador iterado\n    async editFireStoreMessage(Identifier, objeto) {\n      const db = getFirestore();\n      await setDoc(doc(db, \"mensajes\", Identifier), objeto);\n    }\n\n  },\n\n  mounted() {\n    //carga inicial de los mensajes de firestore\n    this.getMessajes();\n  }\n\n};\nimport { getFirestore, collection, deleteDoc, doc, addDoc, setDoc } from \"firebase/firestore\";\nimport { mapActions } from \"vuex\"; //importacion de complementos adicionales de element plus\n\nimport { ElMessage } from \"element-plus\"; //importacion de iconos de element plis\n\nimport { Delete, Edit, Message } from \"@element-plus/icons-vue\"; //importacion de referenciacion de vue necesaria para hacer compatible elementos de element plus vue2 con vue3\n//en este caso solo se usa para el dialog (modal de edicion)\n\nimport { ref } from \"vue\";\nexport default /*#__PURE__*/Object.assign(__default__, {\n  setup(__props, {\n    expose\n  }) {\n    expose(); //Importación de librerias de firebase\n\n    const dialogFormVisible = ref(false);\n    const __returned__ = {\n      dialogFormVisible,\n      TitleLogo,\n      getFirestore,\n      collection,\n      deleteDoc,\n      doc,\n      addDoc,\n      setDoc,\n      mapActions,\n      ElMessage,\n      Delete,\n      Edit,\n      Message,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n});","map":{"version":3,"mappings":"AAqJA;AACA,OAAOA,SAAP,MAAsB,6BAAtB;AAEA,oBAAe;EACbC,IAAI,EAAE,KADO;EAEbC,UAAU,EAAE;IAAEF;EAAF,CAFC;;EAGbG,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EADL;MAELC,UAAU,EAAE,EAFP;MAGLC,WAAW,EAAE;IAHR,CAAP;EAKD,CATY;;EAUbC,OAAO,EAAE,EAEP,GAAGC,UAAU,CAAC,CAAC,mBAAD,EAAsB,OAAtB,CAAD,CAFN;;IAGPC,aAAa,GAAG;MACd,KAAKC,iBAAL,CAAuBC,YAAvB;IACD,CALM;;IAMPC,cAAc,GAAG;MACf,KAAKC,MAAL;IACD,CARM;;IAUP;IACA,MAAMC,UAAN,CAAiBC,MAAjB,EAAyB;MACvB,IAAI,KAAKV,UAAL,IAAmB,EAAvB,EAA2B;QACzB,MAAMW,EAAE,GAAGL,YAAY,EAAvB;QACA,MAAMM,MAAM,CAACC,UAAU,CAACF,EAAD,EAAK,UAAL,CAAX,EAA6BD,MAA7B,CAAZ;QACAI,SAAS,CAAC;UAAEC,OAAO,EAAE,iBAAX;UAA8BC,IAAI,EAAE;QAApC,CAAD,CAAT;MACD,CAJD,MAIO;QACLF,SAAS,CAAC;UACRC,OAAO,EAAE,kCADD;UAERC,IAAI,EAAE;QAFE,CAAD,CAAT;MAID;IACF,CAtBM;;IAwBP;IACA,MAAMC,UAAN,CAAiBC,UAAjB,EAA6B;MAC3B,MAAMP,EAAE,GAAGL,YAAY,EAAvB;MACA,MAAMa,SAAS,CAACC,GAAG,CAACT,EAAD,EAAK,UAAL,EAAiBO,UAAjB,CAAJ,CAAf;MACAJ,SAAS,CAAC;QAAEC,OAAO,EAAE,mBAAX;QAAgCC,IAAI,EAAE;MAAtC,CAAD,CAAT;IACD,CA7BM;;IA+BP;IACAK,cAAc,CAACC,OAAD,EAAU;MACtB,KAAKrB,WAAL,GAAmBqB,OAAnB;IACD,CAlCM;;IAoCP;IACA,MAAMC,oBAAN,CAA2BL,UAA3B,EAAuCR,MAAvC,EAA+C;MAC7C,MAAMC,EAAE,GAAGL,YAAY,EAAvB;MACD,MAAMkB,MAAM,CAACJ,GAAG,CAACT,EAAD,EAAK,UAAL,EAAiBO,UAAjB,CAAJ,EAAkCR,MAAlC,CAAZ;IACA;;EAxCM,CAVI;;EAoDbe,OAAO,GAAG;IACR;IACA,KAAKC,WAAL;EACD;;AAvDY,CAAf;AA3BA,SACEpB,YADF,EAEEO,UAFF,EAGEM,SAHF,EAIEC,GAJF,EAKER,MALF,EAMEY,MANF,QAOO,oBAPP;AAQA,SAASrB,UAAT,QAA2B,MAA3B,C,CAEA;;AACA,SAASW,SAAT,QAA0B,cAA1B,C,CAEA;;AACA,SAASa,MAAT,EAAiBC,IAAjB,EAAuBN,OAAvB,QAAsC,yBAAtC,C,CAEA;AACA;;AAEA,SAASO,GAAT,QAAoB,KAApB;;;;;cApBA;;IAqBA,MAAMC,iBAAiB,GAAGD,GAAG,CAAC,KAAD,CAA7B","names":["TitleLogo","name","components","data","mensajes","newMessage","editMessage","methods","mapActions","initFirestore","instanceFirestore","getFirestore","checkFirestore","testeo","addMessage","objeto","db","addDoc","collection","ElMessage","message","type","delMessage","Identifier","deleteDoc","doc","setEditMessage","Message","editFireStoreMessage","setDoc","mounted","getMessajes","Delete","Edit","ref","dialogFormVisible"],"sources":["/Users/pibustamante/Documents/repositorios/vue-avanzado/pruerba/src/views/ChatView.vue"],"sourcesContent":["<template>\n  <!-- Logo superior cabezera -->\n  <TitleLogo />\n\n  <!-- Grilla superior -->\n\n  <el-row :gutter=\"10\">\n    <!-- Columna invisible para centrar responsivo -->\n\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"></div\n    ></el-col>\n\n    <!-- Columna que contiene los mensajes -->\n\n    <el-col :xs=\"24\" :sm=\"20\" :md=\"16\" :lg=\"12\" :xl=\"8\">\n      <div class=\"grid-content_up bg-purple-light\">\n        <!-- elemento que encapsula los mensajes para agregar un scrollbar-->\n        <el-scrollbar always @scroll=\"200\" height=\"600px\">\n          <!-- iterador de los mensajes de firebase -->\n          <div class=\"mensaje\" v-for=\"value in mensajes\" :key=\"value.id\">\n            <li>\n              <!-- burbuja de chat -->\n\n              <div class=\"mensaje_burbuja\">\n                <!--controles editar y eliminar invisibles si no son hover -->\n                <div class=\"mensaje_controls\">\n                  <!-- boton de editar -->\n                  <el-button\n                    @click=\"\n                      (dialogFormVisible = true),\n                        setEditMessage(value.data.texto)\n                    \"\n                    type=\"primary\"\n                    :icon=\"Edit\"\n                    circle\n                  />\n                  <!-- modal del boton editar -->\n                  <el-dialog v-model=\"dialogFormVisible\">\n                    <el-input v-model=\"editMessage\" autocomplete=\"off\" />\n                    <span class=\"dialog-footer\">\n                      <!-- boton cancelar edicion -->\n                      <el-button @click=\"dialogFormVisible = false\"\n                        >Cancel</el-button\n                      >\n                      <!-- boton que gatilla la edicion -->\n                      <el-button\n                        type=\"primary\"\n                        @click=\"\n                          (dialogFormVisible = false),\n                            editFireStoreMessage(value.id, {\n                              texto: editMessage, date: value.data.date\n                            })\n                        \"\n                        >Confirm</el-button\n                      >\n                    </span>\n                  </el-dialog>\n\n                  <!-- boton de eliminar -->\n                  <el-button\n                    @click=\"delMessage(value.id)\"\n                    type=\"danger\"\n                    :icon=\"Delete\"\n                    circle\n                  />\n                </div>\n                <!-- mensaje de la burbuja -->\n                <a>{{ value.data.texto }}</a>\n              </div>\n            </li>\n          </div>\n        </el-scrollbar>\n      </div>\n    </el-col>\n    <!--columna invisible usada para centrar-->\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"\n    /></el-col>\n  </el-row>\n\n  <!--grilla inferior -->\n  <el-row :gutter=\"10\">\n    <!--columna invisible usada para centrar-->\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"></div\n    ></el-col>\n\n    <!--columna que contiene el cuadro de texto y el boton enviar-->\n    <el-col :xs=\"24\" :sm=\"20\" :md=\"16\" :lg=\"12\" :xl=\"8\">\n      <div class=\"grid-content_down bg-purple-light\">\n        <!-- grilla interior usada para ordenar elementos de caja de texto y boton enviar-->\n        <el-row :gutter=\"10\">\n          <!--cajita de texto-->\n          <el-col :xs=\"21\" :sm=\"22\" :md=\"22\" :lg=\"22\" :xl=\"22\"\n            ><el-input\n              v-on:keyup.enter=\"\n                addMessage({ texto: newMessage, date: Date.now() })\n              \"\n              v-model=\"newMessage\"\n              autocomplete=\"off\"\n          /></el-col>\n          <!--boton enviar-->\n          <el-col :xs=\"3\" :sm=\"2\" :md=\"2\" :lg=\"2\" :xl=\"2\">\n            <el-button\n              @click=\"addMessage({ texto: newMessage, date: Date.now() })\"\n              type=\"primary\"\n              :icon=\"Message\"\n            />\n          </el-col>\n        </el-row>\n      </div>\n    </el-col>\n\n    <!--columna invisible usada para centrar-->\n\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"\n    /></el-col>\n  </el-row>\n</template>\n\n\n<script  setup>\n//Importación de librerias de firebase\nimport {\n  getFirestore,\n  collection,\n  deleteDoc,\n  doc,\n  addDoc,\n  setDoc,\n} from \"firebase/firestore\";\nimport { mapActions } from \"vuex\";\n\n//importacion de complementos adicionales de element plus\nimport { ElMessage } from \"element-plus\";\n\n//importacion de iconos de element plis\nimport { Delete, Edit, Message } from \"@element-plus/icons-vue\";\n\n//importacion de referenciacion de vue necesaria para hacer compatible elementos de element plus vue2 con vue3\n//en este caso solo se usa para el dialog (modal de edicion)\n\nimport { ref } from \"vue\";\nconst dialogFormVisible = ref(false);\n</script>\n\n<script>\n//importo el componente donde tengo el logo y el nombre de la app\nimport TitleLogo from \"../components/TitleLogo.vue\";\n\nexport default {\n  name: \"App\",\n  components: { TitleLogo },\n  data() {\n    return {\n      mensajes: [],\n      newMessage: \"\",\n      editMessage: \"\",\n    };\n  },\n  methods: {\n\n    ...mapActions([\"instanceFirestore\", \"getMe\"]),\n    initFirestore() {\n      this.instanceFirestore(getFirestore);\n    },\n    checkFirestore() {\n      this.testeo();\n    },\n\n    //añadir nuevos elementos a firestore siempre cuando algo sea escrito en el mensaje (en este caso no valide los trim son las 2:14 tengo sueño)\n    async addMessage(objeto) {\n      if (this.newMessage != \"\") {\n        const db = getFirestore();\n        await addDoc(collection(db, \"mensajes\"), objeto);\n        ElMessage({ message: \"Mensaje enviado\", type: \"success\" });\n      } else {\n        ElMessage({\n          message: \"Mensaje no puede estar en blanco\",\n          type: \"error\",\n        });\n      }\n    },\n\n    //eliminar elemenntos de firestore utilizando el identificador iterado\n    async delMessage(Identifier) {\n      const db = getFirestore();\n      await deleteDoc(doc(db, \"mensajes\", Identifier));\n      ElMessage({ message: \"Mensaje eliminado\", type: \"success\" });\n    },\n\n    //metodo que sirve para asignar de forma dinamica el contenido del cuadro de texto de edición con el mensaje iterado seleccionado\n    setEditMessage(Message) {\n      this.editMessage = Message;\n    },\n\n    //editar elementos de firestore utilizando el identificador iterado\n    async editFireStoreMessage(Identifier, objeto) {\n      const db = getFirestore();\n     await setDoc(doc(db, \"mensajes\", Identifier), objeto);\n    },\n  },\n  mounted() {\n    //carga inicial de los mensajes de firestore\n    this.getMessajes();\n  },\n};\n</script>\n\n<style >\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 20px;\n}\n\n.el-col {\n  border-radius: 4px;\n}\n\n.bg-purple {\n}\n.bg-purple-light {\n  background: #e5e9f2;\n}\n.grid-content {\n  border-radius: 4px 4px 0% 0%;\n  min-height: 36px;\n}\n\n.grid-content_up {\n  border-radius: 4px 4px 0% 0%;\n  min-height: 36px;\n}\n\n.grid-content_down {\n  border-radius: 0px 0px 4px 4px;\n  min-height: 36px;\n  padding: 10px;\n}\n\n.mensaje {\n  padding: 10px;\n}\n\nli {\n  border-radius: 10px;\n  list-style-type: none;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.mensaje_burbuja {\n  background-color: cornflowerblue;\n  color: white;\n  padding-right: 20px;\n  padding: 10px;\n  border-radius: 10px;\n  position: relative;\n  display: inline-block;\n  min-width: 200px;\n  text-align: right;\n}\n\n.mensaje_burbuja:hover {\n  background-color: rgb(58, 111, 211);\n}\n\n.mensaje_burbuja:hover > .mensaje_controls {\n  display: flex;\n}\n.mensaje_controls {\n  display: none;\n  margin-left: -10px;\n  margin-top: -10px;\n  padding: 0px;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  justify-content: center;\n  align-items: center;\n}\n\n.mensaje_burbuja_eliminar {\n  width: 20px;\n  height: 20px;\n  background-color: rgb(255, 152, 152);\n  border-radius: 100%;\n  float: right;\n}\n\n.mensaje_burbuja_editar {\n  width: 20px;\n  height: 20px;\n  background-color: rgb(255, 227, 137);\n  border-radius: 100%;\n  float: right;\n}\n\nli:hover > .mensaje_burbuja_editar {\n  display: block;\n}\n</style>"]},"metadata":{},"sourceType":"module"}