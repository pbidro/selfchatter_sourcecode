{"ast":null,"code":"//importo el componente donde tengo el logo y el nombre de la app\nimport TitleLogo from \"./components/TitleLogo.vue\";\nconst __default__ = {\n  name: \"App\",\n  components: {\n    TitleLogo\n  },\n\n  data() {\n    return {\n      mensajes: [],\n      newMessage: \"\",\n      editMessage: \"\"\n    };\n  },\n\n  methods: {\n    //obtencion de mensajes ordenados de forma ascendiente dependiendo de la fecha ingresada\n    async getMessajes() {\n      const db = getFirestore();\n      const q = query(collection(db, \"mensajes\"), orderBy(\"date\"));\n      onSnapshot(q, querySnapshot => {\n        const mensajes = [];\n        this.mensajes = [];\n        querySnapshot.forEach(doc => {\n          mensajes.push({\n            id: doc.id,\n            data: doc.data()\n          });\n        });\n        this.mensajes = mensajes;\n        this.newMessage = \"\";\n      });\n    },\n\n    //a침adir nuevos elementos a firestore siempre cuando algo sea escrito en el mensaje (en este caso no valide los trim son las 2:14 tengo sue침o)\n    async addMessage(objeto) {\n      if (this.newMessage != \"\") {\n        const db = getFirestore();\n        await addDoc(collection(db, \"mensajes\"), objeto);\n        ElMessage({\n          message: \"Mensaje enviado\",\n          type: \"success\"\n        });\n      } else {\n        ElMessage({\n          message: \"Mensaje no puede estar en blanco\",\n          type: \"error\"\n        });\n      }\n    },\n\n    //eliminar elemenntos de firestore utilizando el identificador iterado\n    async delMessage(Identifier) {\n      const db = getFirestore();\n      await deleteDoc(doc(db, \"mensajes\", Identifier));\n      ElMessage({\n        message: \"Mensaje eliminado\",\n        type: \"success\"\n      });\n    },\n\n    //metodo que sirve para asignar de forma dinamica el contenido del cuadro de texto de edici칩n con el mensaje iterado seleccionado\n    setEditMessage(Message) {\n      this.editMessage = Message;\n    },\n\n    //editar elementos de firestore utilizando el identificador iterado\n    editFireStoreMessage(Identifier, objeto) {\n      const db = getFirestore();\n      setDoc(doc(db, \"mensajes\", Identifier), objeto);\n    }\n\n  },\n\n  mounted() {\n    //carga inicial de los mensajes de firestore\n    this.getMessajes();\n  }\n\n};\nimport { getFirestore, collection, onSnapshot, query, deleteDoc, doc, addDoc, setDoc, orderBy } from \"firebase/firestore\"; //importacion de complementos adicionales de element plus\n\nimport { ElMessage } from \"element-plus\"; //importacion de iconos de element plis\n\nimport { Delete, Edit, Message } from \"@element-plus/icons-vue\"; //importacion de referenciacion de vue necesaria para hacer compatible elementos de element plus vue2 con vue3\n//en este caso solo se usa para el dialog (modal de edicion)\n\nimport { ref } from \"vue\";\nexport default /*#__PURE__*/Object.assign(__default__, {\n  setup(__props, {\n    expose\n  }) {\n    expose(); //Importaci칩n de librerias de firebase\n\n    const dialogFormVisible = ref(false);\n    const __returned__ = {\n      dialogFormVisible,\n      TitleLogo,\n      getFirestore,\n      collection,\n      onSnapshot,\n      query,\n      deleteDoc,\n      doc,\n      addDoc,\n      setDoc,\n      orderBy,\n      ElMessage,\n      Delete,\n      Edit,\n      Message,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n});","map":{"version":3,"mappings":"AAuJA;AACA,OAAOA,SAAP,MAAsB,4BAAtB;AAEA,oBAAe;AACbC,MAAI,EAAE,KADO;AAEbC,YAAU,EAAE;AAAEF;AAAF,GAFC;;AAGbG,MAAI,GAAG;AACL,WAAO;AACLC,cAAQ,EAAE,EADL;AAELC,gBAAU,EAAE,EAFP;AAGLC,iBAAW,EAAE;AAHR,KAAP;AAKD,GATY;;AAUbC,SAAO,EAAE;AACP;AACA,UAAMC,WAAN,GAAoB;AAClB,YAAMC,EAAE,GAAGC,YAAY,EAAvB;AACA,YAAMC,CAAC,GAAGC,KAAK,CAACC,UAAU,CAACJ,EAAD,EAAK,UAAL,CAAX,EAA6BK,OAAO,CAAC,MAAD,CAApC,CAAf;AACAC,gBAAU,CAACJ,CAAD,EAAKK,aAAD,IAAmB;AAC/B,cAAMZ,QAAQ,GAAG,EAAjB;AACA,aAAKA,QAAL,GAAgB,EAAhB;AACAY,qBAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC7Bd,kBAAQ,CAACe,IAAT,CAAc;AAAEC,cAAE,EAAEF,GAAG,CAACE,EAAV;AAAcjB,gBAAI,EAAEe,GAAG,CAACf,IAAJ;AAApB,WAAd;AACD,SAFD;AAGA,aAAKC,QAAL,GAAgBA,QAAhB;AACA,aAAKC,UAAL,GAAkB,EAAlB;AACD,OARS,CAAV;AASD,KAdM;;AAgBP;AACA,UAAMgB,UAAN,CAAiBC,MAAjB,EAAyB;AACvB,UAAI,KAAKjB,UAAL,IAAmB,EAAvB,EAA2B;AACzB,cAAMI,EAAE,GAAGC,YAAY,EAAvB;AACA,cAAMa,MAAM,CAACV,UAAU,CAACJ,EAAD,EAAK,UAAL,CAAX,EAA6Ba,MAA7B,CAAZ;AACAE,iBAAS,CAAC;AAAEC,iBAAO,EAAE,iBAAX;AAA8BC,cAAI,EAAE;AAApC,SAAD,CAAT;AACD,OAJD,MAIO;AACLF,iBAAS,CAAC;AACRC,iBAAO,EAAE,kCADD;AAERC,cAAI,EAAE;AAFE,SAAD,CAAT;AAID;AACF,KA5BM;;AA8BP;AACA,UAAMC,UAAN,CAAiBC,UAAjB,EAA6B;AAC3B,YAAMnB,EAAE,GAAGC,YAAY,EAAvB;AACA,YAAMmB,SAAS,CAACX,GAAG,CAACT,EAAD,EAAK,UAAL,EAAiBmB,UAAjB,CAAJ,CAAf;AACAJ,eAAS,CAAC;AAAEC,eAAO,EAAE,mBAAX;AAAgCC,YAAI,EAAE;AAAtC,OAAD,CAAT;AACD,KAnCM;;AAqCP;AACAI,kBAAc,CAACC,OAAD,EAAU;AACtB,WAAKzB,WAAL,GAAmByB,OAAnB;AACD,KAxCM;;AA0CP;AACAC,wBAAoB,CAACJ,UAAD,EAAaN,MAAb,EAAqB;AACvC,YAAMb,EAAE,GAAGC,YAAY,EAAvB;AACAuB,YAAM,CAACf,GAAG,CAACT,EAAD,EAAK,UAAL,EAAiBmB,UAAjB,CAAJ,EAAkCN,MAAlC,CAAN;AACD;;AA9CM,GAVI;;AA0DbY,SAAO,GAAG;AACR;AACA,SAAK1B,WAAL;AACD;;AA7DY,CAAf;AA7BA,SACEE,YADF,EAEEG,UAFF,EAGEE,UAHF,EAIEH,KAJF,EAKEiB,SALF,EAMEX,GANF,EAOEK,MAPF,EAQEU,MARF,EASEnB,OATF,QAUO,oBAVP,C,CAYA;;AACA,SAASU,SAAT,QAA0B,cAA1B,C,CAEA;;AACA,SAASW,MAAT,EAAiBC,IAAjB,EAAuBL,OAAvB,QAAsC,yBAAtC,C,CAEA;AACA;;AAEA,SAASM,GAAT,QAAoB,KAApB;;;;;cAtBA;;AAuBA,UAAMC,iBAAiB,GAAGD,GAAG,CAAC,KAAD,CAA7B","names":["TitleLogo","name","components","data","mensajes","newMessage","editMessage","methods","getMessajes","db","getFirestore","q","query","collection","orderBy","onSnapshot","querySnapshot","forEach","doc","push","id","addMessage","objeto","addDoc","ElMessage","message","type","delMessage","Identifier","deleteDoc","setEditMessage","Message","editFireStoreMessage","setDoc","mounted","Delete","Edit","ref","dialogFormVisible"],"sources":["/Users/pibustamante/Documents/repositorios/vue-avanzado/desafio_2/src/App.vue"],"sourcesContent":["<template>\n  <!-- Logo superior cabezera -->\n  <TitleLogo />\n\n  <!-- Grilla superior -->\n\n  <el-row :gutter=\"10\">\n    <!-- Columna invisible para centrar responsivo -->\n\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"></div\n    ></el-col>\n\n    <!-- Columna que contiene los mensajes -->\n\n    <el-col :xs=\"24\" :sm=\"20\" :md=\"16\" :lg=\"12\" :xl=\"8\">\n      <div class=\"grid-content_up bg-purple-light\">\n        <!-- elemento que encapsula los mensajes para agregar un scrollbar-->\n        <el-scrollbar always @scroll=\"200\" height=\"600px\">\n          <!-- iterador de los mensajes de firebase -->\n          <div class=\"mensaje\" v-for=\"value in mensajes\" :key=\"value.id\">\n            <li>\n              <!-- burbuja de chat -->\n\n              <div class=\"mensaje_burbuja\">\n                <!--controles editar y eliminar invisibles si no son hover -->\n                <div class=\"mensaje_controls\">\n                  <!-- boton de editar -->\n                  <el-button\n                    @click=\"\n                      (dialogFormVisible = true),\n                        setEditMessage(value.data.texto)\n                    \"\n                    type=\"primary\"\n                    :icon=\"Edit\"\n                    circle\n                  />\n                  <!-- modal del boton editar -->\n                  <el-dialog v-model=\"dialogFormVisible\">\n                    <input type=\"text\" style=\"width:90%; broder-radius:5px; padding:10px; display:inline-block;\" v-model=\"editMessage\" autocomplete=\"off\" />\n                    <span class=\"dialog-footer\">\n                      <!-- boton cancelar edicion -->\n                      <el-button @click=\"dialogFormVisible = false\"\n                        >Cancel</el-button\n                      >\n                      <!-- boton que gatilla la edicion -->\n                      <el-button\n                        type=\"primary\"\n                        @click=\"\n                          (dialogFormVisible = false),\n                            editFireStoreMessage(value.id, {\n                              texto: editMessage, date: value.data.date\n                            })\n                        \"\n                        >Confirm</el-button\n                      >\n                    </span>\n                  </el-dialog>\n\n                  <!-- boton de eliminar -->\n                  <el-button\n                    @click=\"delMessage(value.id)\"\n                    type=\"danger\"\n                    :icon=\"Delete\"\n                    circle\n                  />\n                </div>\n                <!-- mensaje de la burbuja -->\n                <a>{{ value.data.texto }}</a>\n              </div>\n            </li>\n          </div>\n        </el-scrollbar>\n      </div>\n    </el-col>\n    <!--columna invisible usada para centrar-->\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"\n    /></el-col>\n  </el-row>\n\n  <!--grilla inferior -->\n  <el-row :gutter=\"10\">\n    <!--columna invisible usada para centrar-->\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"></div\n    ></el-col>\n\n    <!--columna que contiene el cuadro de texto y el boton enviar-->\n    <el-col :xs=\"24\" :sm=\"20\" :md=\"16\" :lg=\"12\" :xl=\"8\">\n      <div class=\"grid-content_down bg-purple-light\">\n        <!-- grilla interior usada para ordenar elementos de caja de texto y boton enviar-->\n        <el-row :gutter=\"10\">\n          <!--cajita de texto-->\n          <el-col :xs=\"21\" :sm=\"22\" :md=\"22\" :lg=\"22\" :xl=\"22\"\n            ><el-input\n              v-on:keyup.enter=\"\n                addMessage({ texto: newMessage, date: Date.now() })\n              \"\n              v-model=\"newMessage\"\n              autocomplete=\"off\"\n          /></el-col>\n          <!--boton enviar-->\n          <el-col :xs=\"3\" :sm=\"2\" :md=\"2\" :lg=\"2\" :xl=\"2\">\n            <el-button\n              @click=\"addMessage({ texto: newMessage, date: Date.now() })\"\n              type=\"primary\"\n              :icon=\"Message\"\n            />\n          </el-col>\n        </el-row>\n      </div>\n    </el-col>\n\n    <!--columna invisible usada para centrar-->\n\n    <el-col :xs=\"0\" :sm=\"2\" :md=\"4\" :lg=\"6\" :xl=\"8\"\n      ><div class=\"grid-content bg-purple\"\n    /></el-col>\n  </el-row>\n</template>\n\n\n<script  setup>\n//Importaci칩n de librerias de firebase\nimport {\n  getFirestore,\n  collection,\n  onSnapshot,\n  query,\n  deleteDoc,\n  doc,\n  addDoc,\n  setDoc,\n  orderBy,\n} from \"firebase/firestore\";\n\n//importacion de complementos adicionales de element plus\nimport { ElMessage } from \"element-plus\";\n\n//importacion de iconos de element plis\nimport { Delete, Edit, Message } from \"@element-plus/icons-vue\";\n\n//importacion de referenciacion de vue necesaria para hacer compatible elementos de element plus vue2 con vue3\n//en este caso solo se usa para el dialog (modal de edicion)\n\nimport { ref } from \"vue\";\nconst dialogFormVisible = ref(false);\n</script>\n\n<script>\n//importo el componente donde tengo el logo y el nombre de la app\nimport TitleLogo from \"./components/TitleLogo.vue\";\n\nexport default {\n  name: \"App\",\n  components: { TitleLogo },\n  data() {\n    return {\n      mensajes: [],\n      newMessage: \"\",\n      editMessage: \"\",\n    };\n  },\n  methods: {\n    //obtencion de mensajes ordenados de forma ascendiente dependiendo de la fecha ingresada\n    async getMessajes() {\n      const db = getFirestore();\n      const q = query(collection(db, \"mensajes\"), orderBy(\"date\"));\n      onSnapshot(q, (querySnapshot) => {\n        const mensajes = [];\n        this.mensajes = [];\n        querySnapshot.forEach((doc) => {\n          mensajes.push({ id: doc.id, data: doc.data() });\n        });\n        this.mensajes = mensajes;\n        this.newMessage = \"\";\n      });\n    },\n\n    //a침adir nuevos elementos a firestore siempre cuando algo sea escrito en el mensaje (en este caso no valide los trim son las 2:14 tengo sue침o)\n    async addMessage(objeto) {\n      if (this.newMessage != \"\") {\n        const db = getFirestore();\n        await addDoc(collection(db, \"mensajes\"), objeto);\n        ElMessage({ message: \"Mensaje enviado\", type: \"success\" });\n      } else {\n        ElMessage({\n          message: \"Mensaje no puede estar en blanco\",\n          type: \"error\",\n        });\n      }\n    },\n\n    //eliminar elemenntos de firestore utilizando el identificador iterado\n    async delMessage(Identifier) {\n      const db = getFirestore();\n      await deleteDoc(doc(db, \"mensajes\", Identifier));\n      ElMessage({ message: \"Mensaje eliminado\", type: \"success\" });\n    },\n\n    //metodo que sirve para asignar de forma dinamica el contenido del cuadro de texto de edici칩n con el mensaje iterado seleccionado\n    setEditMessage(Message) {\n      this.editMessage = Message;\n    },\n\n    //editar elementos de firestore utilizando el identificador iterado\n    editFireStoreMessage(Identifier, objeto) {\n      const db = getFirestore();\n      setDoc(doc(db, \"mensajes\", Identifier), objeto);\n    },\n  },\n  mounted() {\n    //carga inicial de los mensajes de firestore\n    this.getMessajes();\n  },\n};\n</script>\n\n<style >\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 20px;\n}\n\n.el-col {\n  border-radius: 4px;\n}\n\n.bg-purple {\n}\n.bg-purple-light {\n  background: #e5e9f2;\n}\n.grid-content {\n  border-radius: 4px 4px 0% 0%;\n  min-height: 36px;\n}\n\n.grid-content_up {\n  border-radius: 4px 4px 0% 0%;\n  min-height: 36px;\n}\n\n.grid-content_down {\n  border-radius: 0px 0px 4px 4px;\n  min-height: 36px;\n  padding: 10px;\n}\n\n.mensaje {\n  padding: 10px;\n}\n\nli {\n  border-radius: 10px;\n  list-style-type: none;\n  display: flex;\n  justify-content: end;\n}\n\n.mensaje_burbuja {\n  background-color: cornflowerblue;\n  color: white;\n  padding-right: 20px;\n  padding: 10px;\n  border-radius: 10px;\n  position: relative;\n  display: inline-block;\n  min-width: 200px;\n  text-align: right;\n}\n\n.mensaje_burbuja:hover {\n  background-color: rgb(58, 111, 211);\n}\n\n.mensaje_burbuja:hover > .mensaje_controls {\n  display: flex;\n}\n.mensaje_controls {\n  display: none;\n  margin-left: -10px;\n  margin-top: -10px;\n  padding: 0px;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 2;\n  justify-content: center;\n  align-items: center;\n}\n\n.mensaje_burbuja_eliminar {\n  width: 20px;\n  height: 20px;\n  background-color: rgb(255, 152, 152);\n  border-radius: 100%;\n  float: right;\n}\n\n.mensaje_burbuja_editar {\n  width: 20px;\n  height: 20px;\n  background-color: rgb(255, 227, 137);\n  border-radius: 100%;\n  float: right;\n}\n\nli:hover > .mensaje_burbuja_editar {\n  display: block;\n}\n</style>"]},"metadata":{},"sourceType":"module"}