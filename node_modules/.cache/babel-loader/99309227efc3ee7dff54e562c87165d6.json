{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, unref, nextTick, onMounted, h, resolveDynamicComponent } from 'vue';\nimport { isNumber, isClient } from '@vueuse/core';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport ScrollBar from '../components/scrollbar.mjs';\nimport { useGridWheel } from '../hooks/use-grid-wheel.mjs';\nimport { useCache } from '../hooks/use-cache.mjs';\nimport { virtualizedGridProps } from '../props.mjs';\nimport { isRTL, getRTLOffsetType, getScrollDir } from '../utils.mjs';\nimport { ITEM_RENDER_EVT, SCROLL_EVT, FORWARD, BACKWARD, RTL_OFFSET_POS_DESC, RTL_OFFSET_NAG, AUTO_ALIGNMENT, RTL, RTL_OFFSET_POS_ASC } from '../defaults.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getScrollBarWidth } from '../../../../utils/dom/scroll.mjs';\nimport { hasOwn, isString } from '@vue/shared';\n\nconst createGrid = ({\n  name,\n  clearCache,\n  getColumnPosition,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getColumnOffset,\n  getRowOffset,\n  getRowPosition,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initCache,\n  injectToInstance,\n  validateProps\n}) => {\n  return defineComponent({\n    name: name != null ? name : \"ElVirtualList\",\n    props: virtualizedGridProps,\n    emits: [ITEM_RENDER_EVT, SCROLL_EVT],\n\n    setup(props, {\n      emit,\n      expose,\n      slots\n    }) {\n      const ns = useNamespace(\"vl\");\n      validateProps(props);\n      const instance = getCurrentInstance();\n      const cache = ref(initCache(props, instance));\n      injectToInstance == null ? void 0 : injectToInstance(instance, cache);\n      const windowRef = ref();\n      const hScrollbar = ref();\n      const vScrollbar = ref();\n      const innerRef = ref(null);\n      const states = ref({\n        isScrolling: false,\n        scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,\n        scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,\n        updateRequested: false,\n        xAxisScrollDir: FORWARD,\n        yAxisScrollDir: FORWARD\n      });\n      const getItemStyleCache = useCache();\n      const parsedHeight = computed(() => Number.parseInt(`${props.height}`, 10));\n      const parsedWidth = computed(() => Number.parseInt(`${props.width}`, 10));\n      const columnsToRender = computed(() => {\n        const {\n          totalColumn,\n          totalRow,\n          columnCache\n        } = props;\n        const {\n          isScrolling,\n          xAxisScrollDir,\n          scrollLeft\n        } = unref(states);\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0];\n        }\n\n        const startIndex = getColumnStartIndexForOffset(props, scrollLeft, unref(cache));\n        const stopIndex = getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, unref(cache));\n        const cacheBackward = !isScrolling || xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;\n        const cacheForward = !isScrolling || xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;\n        return [Math.max(0, startIndex - cacheBackward), Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)), startIndex, stopIndex];\n      });\n      const rowsToRender = computed(() => {\n        const {\n          totalColumn,\n          totalRow,\n          rowCache\n        } = props;\n        const {\n          isScrolling,\n          yAxisScrollDir,\n          scrollTop\n        } = unref(states);\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0];\n        }\n\n        const startIndex = getRowStartIndexForOffset(props, scrollTop, unref(cache));\n        const stopIndex = getRowStopIndexForStartIndex(props, startIndex, scrollTop, unref(cache));\n        const cacheBackward = !isScrolling || yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;\n        const cacheForward = !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;\n        return [Math.max(0, startIndex - cacheBackward), Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)), startIndex, stopIndex];\n      });\n      const estimatedTotalHeight = computed(() => getEstimatedTotalHeight(props, unref(cache)));\n      const estimatedTotalWidth = computed(() => getEstimatedTotalWidth(props, unref(cache)));\n      const windowStyle = computed(() => {\n        var _a;\n\n        return [{\n          position: \"relative\",\n          overflow: \"hidden\",\n          WebkitOverflowScrolling: \"touch\",\n          willChange: \"transform\"\n        }, {\n          direction: props.direction,\n          height: isNumber(props.height) ? `${props.height}px` : props.height,\n          width: isNumber(props.width) ? `${props.width}px` : props.width\n        }, (_a = props.style) != null ? _a : {}];\n      });\n      const innerStyle = computed(() => {\n        const width = `${unref(estimatedTotalWidth)}px`;\n        const height = `${unref(estimatedTotalHeight)}px`;\n        return {\n          height,\n          pointerEvents: unref(states).isScrolling ? \"none\" : void 0,\n          width\n        };\n      });\n\n      const emitEvents = () => {\n        const {\n          totalColumn,\n          totalRow\n        } = props;\n\n        if (totalColumn > 0 && totalRow > 0) {\n          const [columnCacheStart, columnCacheEnd, columnVisibleStart, columnVisibleEnd] = unref(columnsToRender);\n          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] = unref(rowsToRender);\n          emit(ITEM_RENDER_EVT, {\n            columnCacheStart,\n            columnCacheEnd,\n            rowCacheStart,\n            rowCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n            rowVisibleStart,\n            rowVisibleEnd\n          });\n        }\n\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested,\n          xAxisScrollDir,\n          yAxisScrollDir\n        } = unref(states);\n        emit(SCROLL_EVT, {\n          xAxisScrollDir,\n          scrollLeft,\n          yAxisScrollDir,\n          scrollTop,\n          updateRequested\n        });\n      };\n\n      const onScroll = e => {\n        const {\n          clientHeight,\n          clientWidth,\n          scrollHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth\n        } = e.currentTarget;\n\n        const _states = unref(states);\n\n        if (_states.scrollTop === scrollTop && _states.scrollLeft === scrollLeft) {\n          return;\n        }\n\n        let _scrollLeft = scrollLeft;\n\n        if (isRTL(props.direction)) {\n          switch (getRTLOffsetType()) {\n            case RTL_OFFSET_NAG:\n              _scrollLeft = -scrollLeft;\n              break;\n\n            case RTL_OFFSET_POS_DESC:\n              _scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        states.value = { ..._states,\n          isScrolling: true,\n          scrollLeft: _scrollLeft,\n          scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),\n          updateRequested: true,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)\n        };\n        nextTick(() => resetIsScrolling());\n        onUpdated();\n        emitEvents();\n      };\n\n      const onVerticalScroll = (distance, totalSteps) => {\n        const height = unref(parsedHeight);\n        const offset = (estimatedTotalHeight.value - height) / totalSteps * distance;\n        scrollTo({\n          scrollTop: Math.min(estimatedTotalHeight.value - height, offset)\n        });\n      };\n\n      const onHorizontalScroll = (distance, totalSteps) => {\n        const width = unref(parsedWidth);\n        const offset = (estimatedTotalWidth.value - width) / totalSteps * distance;\n        scrollTo({\n          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset)\n        });\n      };\n\n      const {\n        onWheel\n      } = useGridWheel({\n        atXStartEdge: computed(() => states.value.scrollLeft <= 0),\n        atXEndEdge: computed(() => states.value.scrollLeft >= estimatedTotalWidth.value),\n        atYStartEdge: computed(() => states.value.scrollTop <= 0),\n        atYEndEdge: computed(() => states.value.scrollTop >= estimatedTotalHeight.value)\n      }, (x, y) => {\n        var _a, _b, _c, _d;\n\n        (_b = (_a = hScrollbar.value) == null ? void 0 : _a.onMouseUp) == null ? void 0 : _b.call(_a);\n        (_d = (_c = hScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);\n        const width = unref(parsedWidth);\n        const height = unref(parsedHeight);\n        scrollTo({\n          scrollLeft: Math.min(states.value.scrollLeft + x, estimatedTotalWidth.value - width),\n          scrollTop: Math.min(states.value.scrollTop + y, estimatedTotalHeight.value - height)\n        });\n      });\n\n      const scrollTo = ({\n        scrollLeft = states.value.scrollLeft,\n        scrollTop = states.value.scrollTop\n      }) => {\n        scrollLeft = Math.max(scrollLeft, 0);\n        scrollTop = Math.max(scrollTop, 0);\n\n        const _states = unref(states);\n\n        if (scrollTop === _states.scrollTop && scrollLeft === _states.scrollLeft) {\n          return;\n        }\n\n        states.value = { ..._states,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n          scrollLeft,\n          scrollTop,\n          updateRequested: true\n        };\n        nextTick(() => resetIsScrolling());\n        onUpdated();\n        emitEvents();\n      };\n\n      const scrollToItem = (rowIndex = 0, columnIdx = 0, alignment = AUTO_ALIGNMENT) => {\n        const _states = unref(states);\n\n        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn - 1));\n        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow - 1));\n        const scrollBarWidth = getScrollBarWidth();\n\n        const _cache = unref(cache);\n\n        const estimatedHeight = getEstimatedTotalHeight(props, _cache);\n        const estimatedWidth = getEstimatedTotalWidth(props, _cache);\n        scrollTo({\n          scrollLeft: getColumnOffset(props, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth > props.width ? scrollBarWidth : 0),\n          scrollTop: getRowOffset(props, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight > props.height ? scrollBarWidth : 0)\n        });\n      };\n\n      const getItemStyle = (rowIndex, columnIndex) => {\n        const {\n          columnWidth,\n          direction,\n          rowHeight\n        } = props;\n        const itemStyleCache = getItemStyleCache.value(clearCache && columnWidth, clearCache && rowHeight, clearCache && direction);\n        const key = `${rowIndex},${columnIndex}`;\n\n        if (hasOwn(itemStyleCache, key)) {\n          return itemStyleCache[key];\n        } else {\n          const [, left] = getColumnPosition(props, columnIndex, unref(cache));\n\n          const _cache = unref(cache);\n\n          const rtl = isRTL(direction);\n          const [height, top] = getRowPosition(props, rowIndex, _cache);\n          const [width] = getColumnPosition(props, columnIndex, _cache);\n          itemStyleCache[key] = {\n            position: \"absolute\",\n            left: rtl ? void 0 : `${left}px`,\n            right: rtl ? `${left}px` : void 0,\n            top: `${top}px`,\n            height: `${height}px`,\n            width: `${width}px`\n          };\n          return itemStyleCache[key];\n        }\n      };\n\n      const resetIsScrolling = () => {\n        states.value.isScrolling = false;\n        nextTick(() => {\n          getItemStyleCache.value(-1, null, null);\n        });\n      };\n\n      onMounted(() => {\n        if (!isClient) return;\n        const {\n          initScrollLeft,\n          initScrollTop\n        } = props;\n        const windowElement = unref(windowRef);\n\n        if (windowElement) {\n          if (isNumber(initScrollLeft)) {\n            windowElement.scrollLeft = initScrollLeft;\n          }\n\n          if (isNumber(initScrollTop)) {\n            windowElement.scrollTop = initScrollTop;\n          }\n        }\n\n        emitEvents();\n      });\n\n      const onUpdated = () => {\n        const {\n          direction\n        } = props;\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested\n        } = unref(states);\n        const windowElement = unref(windowRef);\n\n        if (updateRequested && windowElement) {\n          if (direction === RTL) {\n            switch (getRTLOffsetType()) {\n              case RTL_OFFSET_NAG:\n                {\n                  windowElement.scrollLeft = -scrollLeft;\n                  break;\n                }\n\n              case RTL_OFFSET_POS_ASC:\n                {\n                  windowElement.scrollLeft = scrollLeft;\n                  break;\n                }\n\n              default:\n                {\n                  const {\n                    clientWidth,\n                    scrollWidth\n                  } = windowElement;\n                  windowElement.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n                  break;\n                }\n            }\n          } else {\n            windowElement.scrollLeft = Math.max(0, scrollLeft);\n          }\n\n          windowElement.scrollTop = Math.max(0, scrollTop);\n        }\n      };\n\n      const {\n        resetAfterColumnIndex,\n        resetAfterRowIndex,\n        resetAfter\n      } = instance.proxy;\n      expose({\n        windowRef,\n        innerRef,\n        getItemStyleCache,\n        scrollTo,\n        scrollToItem,\n        states,\n        resetAfterColumnIndex,\n        resetAfterRowIndex,\n        resetAfter\n      });\n\n      const renderScrollbars = () => {\n        const {\n          scrollbarAlwaysOn,\n          scrollbarStartGap,\n          scrollbarEndGap,\n          totalColumn,\n          totalRow\n        } = props;\n        const width = unref(parsedWidth);\n        const height = unref(parsedHeight);\n        const estimatedWidth = unref(estimatedTotalWidth);\n        const estimatedHeight = unref(estimatedTotalHeight);\n        const {\n          scrollLeft,\n          scrollTop\n        } = unref(states);\n        const horizontalScrollbar = h(ScrollBar, {\n          ref: hScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e(\"horizontal\"),\n          clientSize: width,\n          layout: \"horizontal\",\n          onScroll: onHorizontalScroll,\n          ratio: width * 100 / estimatedWidth,\n          scrollFrom: scrollLeft / (estimatedWidth - width),\n          total: totalRow,\n          visible: true\n        });\n        const verticalScrollbar = h(ScrollBar, {\n          ref: vScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e(\"vertical\"),\n          clientSize: height,\n          layout: \"vertical\",\n          onScroll: onVerticalScroll,\n          ratio: height * 100 / estimatedHeight,\n          scrollFrom: scrollTop / (estimatedHeight - height),\n          total: totalColumn,\n          visible: true\n        });\n        return {\n          horizontalScrollbar,\n          verticalScrollbar\n        };\n      };\n\n      const renderItems = () => {\n        var _a;\n\n        const [columnStart, columnEnd] = unref(columnsToRender);\n        const [rowStart, rowEnd] = unref(rowsToRender);\n        const {\n          data,\n          totalColumn,\n          totalRow,\n          useIsScrolling,\n          itemKey\n        } = props;\n        const children = [];\n\n        if (totalRow > 0 && totalColumn > 0) {\n          for (let row = rowStart; row <= rowEnd; row++) {\n            for (let column = columnStart; column <= columnEnd; column++) {\n              children.push((_a = slots.default) == null ? void 0 : _a.call(slots, {\n                columnIndex: column,\n                data,\n                key: itemKey({\n                  columnIndex: column,\n                  data,\n                  rowIndex: row\n                }),\n                isScrolling: useIsScrolling ? unref(states).isScrolling : void 0,\n                style: getItemStyle(row, column),\n                rowIndex: row\n              }));\n            }\n          }\n        }\n\n        return children;\n      };\n\n      const renderInner = () => {\n        const Inner = resolveDynamicComponent(props.innerElement);\n        const children = renderItems();\n        return [h(Inner, {\n          style: unref(innerStyle),\n          ref: innerRef\n        }, !isString(Inner) ? {\n          default: () => children\n        } : children)];\n      };\n\n      const renderWindow = () => {\n        const Container = resolveDynamicComponent(props.containerElement);\n        const {\n          horizontalScrollbar,\n          verticalScrollbar\n        } = renderScrollbars();\n        const Inner = renderInner();\n        return h(\"div\", {\n          key: 0,\n          class: ns.e(\"wrapper\")\n        }, [h(Container, {\n          class: props.className,\n          style: unref(windowStyle),\n          onScroll,\n          onWheel,\n          ref: windowRef\n        }, !isString(Container) ? {\n          default: () => Inner\n        } : Inner), horizontalScrollbar, verticalScrollbar]);\n      };\n\n      return renderWindow;\n    }\n\n  });\n};\n\nexport { createGrid as default };","map":{"version":3,"mappings":"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","names":["createGrid","name","clearCache","getColumnPosition","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getEstimatedTotalHeight","getEstimatedTotalWidth","getColumnOffset","getRowOffset","getRowPosition","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initCache","injectToInstance","validateProps","defineComponent","props","virtualizedGridProps","emits","ITEM_RENDER_EVT","SCROLL_EVT","setup","emit","expose","slots","ns","useNamespace","instance","getCurrentInstance","cache","ref","windowRef","hScrollbar","vScrollbar","innerRef","states","isScrolling","scrollLeft","isNumber","initScrollLeft","scrollTop","initScrollTop","updateRequested","xAxisScrollDir","FORWARD","yAxisScrollDir","getItemStyleCache","useCache","parsedHeight","computed","Number","parseInt","height","parsedWidth","width","columnsToRender","totalColumn","totalRow","columnCache","unref","startIndex","stopIndex","cacheBackward","BACKWARD","Math","max","cacheForward","min","rowsToRender","rowCache","estimatedTotalHeight","estimatedTotalWidth","windowStyle","_a","position","overflow","WebkitOverflowScrolling","willChange","direction","style","innerStyle","pointerEvents","emitEvents","columnCacheStart","columnCacheEnd","columnVisibleStart","columnVisibleEnd","rowCacheStart","rowCacheEnd","rowVisibleStart","rowVisibleEnd","onScroll","e","clientHeight","clientWidth","scrollHeight","scrollWidth","currentTarget","_states","_scrollLeft","isRTL","getRTLOffsetType","RTL_OFFSET_NAG","RTL_OFFSET_POS_DESC","value","getScrollDir","nextTick","resetIsScrolling","onUpdated","onVerticalScroll","distance","totalSteps","offset","scrollTo","onHorizontalScroll","onWheel","useGridWheel","atXStartEdge","atXEndEdge","atYStartEdge","atYEndEdge","x","y","_b","_c","_d","onMouseUp","call","scrollToItem","rowIndex","columnIdx","alignment","AUTO_ALIGNMENT","scrollBarWidth","getScrollBarWidth","_cache","estimatedHeight","estimatedWidth","getItemStyle","columnIndex","columnWidth","rowHeight","itemStyleCache","key","hasOwn","left","rtl","top","right","onMounted","isClient","windowElement","RTL","RTL_OFFSET_POS_ASC","resetAfterColumnIndex","resetAfterRowIndex","resetAfter","proxy","renderScrollbars","scrollbarAlwaysOn","scrollbarStartGap","scrollbarEndGap","horizontalScrollbar","h","Scrollbar","alwaysOn","startGap","endGap","class","clientSize","layout","ratio","scrollFrom","total","visible","verticalScrollbar","renderItems","columnStart","columnEnd","rowStart","rowEnd","data","useIsScrolling","itemKey","children","row","column","push","default","renderInner","Inner","resolveDynamicComponent","innerElement","isString","renderWindow","Container","containerElement","className"],"sources":["../../../../../../../packages/components/virtual-list/src/builders/build-grid.ts"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  h,\n  nextTick,\n  onMounted,\n  ref,\n  resolveDynamicComponent,\n  unref,\n} from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  getScrollBarWidth,\n  hasOwn,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport Scrollbar from '../components/scrollbar'\nimport { useGridWheel } from '../hooks/use-grid-wheel'\nimport { useCache } from '../hooks/use-cache'\nimport { virtualizedGridProps } from '../props'\nimport { getRTLOffsetType, getScrollDir, isRTL } from '../utils'\nimport {\n  AUTO_ALIGNMENT,\n  BACKWARD,\n  FORWARD,\n  ITEM_RENDER_EVT,\n  RTL,\n  RTL_OFFSET_NAG,\n  RTL_OFFSET_POS_ASC,\n  RTL_OFFSET_POS_DESC,\n  SCROLL_EVT,\n} from '../defaults'\nimport type {\n  CSSProperties,\n  Ref,\n  StyleValue,\n  UnwrapRef,\n  VNode,\n  VNodeChild,\n} from 'vue'\nimport type {\n  Alignment,\n  GridConstructorProps,\n  GridScrollOptions,\n  ScrollbarExpose,\n} from '../types'\nimport type { VirtualizedGridProps } from '../props'\n\nconst createGrid = ({\n  name,\n  clearCache,\n  getColumnPosition,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getColumnOffset,\n  getRowOffset,\n  getRowPosition,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n\n  initCache,\n  injectToInstance,\n  validateProps,\n}: GridConstructorProps<VirtualizedGridProps>) => {\n  return defineComponent({\n    name: name ?? 'ElVirtualList',\n    props: virtualizedGridProps,\n    emits: [ITEM_RENDER_EVT, SCROLL_EVT],\n    setup(props, { emit, expose, slots }) {\n      const ns = useNamespace('vl')\n\n      validateProps(props)\n      const instance = getCurrentInstance()!\n      const cache = ref(initCache(props, instance))\n      injectToInstance?.(instance, cache)\n      // refs\n      // here windowRef and innerRef can be type of HTMLElement\n      // or user defined component type, depends on the type passed\n      // by user\n      const windowRef = ref<HTMLElement>()\n      const hScrollbar = ref<ScrollbarExpose>()\n      const vScrollbar = ref<ScrollbarExpose>()\n      // innerRef is the actual container element which contains all the elements\n      const innerRef = ref(null)\n      const states = ref({\n        isScrolling: false,\n        scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,\n        scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,\n        updateRequested: false,\n        xAxisScrollDir: FORWARD,\n        yAxisScrollDir: FORWARD,\n      })\n\n      const getItemStyleCache = useCache()\n\n      // computed\n      const parsedHeight = computed(() =>\n        Number.parseInt(`${props.height}`, 10)\n      )\n      const parsedWidth = computed(() => Number.parseInt(`${props.width}`, 10))\n      const columnsToRender = computed(() => {\n        const { totalColumn, totalRow, columnCache } = props\n        const { isScrolling, xAxisScrollDir, scrollLeft } = unref(states)\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0]\n        }\n\n        const startIndex = getColumnStartIndexForOffset(\n          props,\n          scrollLeft,\n          unref(cache)\n        )\n        const stopIndex = getColumnStopIndexForStartIndex(\n          props,\n          startIndex,\n          scrollLeft,\n          unref(cache)\n        )\n\n        const cacheBackward =\n          !isScrolling || xAxisScrollDir === BACKWARD\n            ? Math.max(1, columnCache)\n            : 1\n        const cacheForward =\n          !isScrolling || xAxisScrollDir === FORWARD\n            ? Math.max(1, columnCache)\n            : 1\n\n        return [\n          Math.max(0, startIndex - cacheBackward),\n          Math.max(0, Math.min(totalColumn! - 1, stopIndex + cacheForward)),\n          startIndex,\n          stopIndex,\n        ]\n      })\n\n      const rowsToRender = computed(() => {\n        const { totalColumn, totalRow, rowCache } = props\n        const { isScrolling, yAxisScrollDir, scrollTop } = unref(states)\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0]\n        }\n\n        const startIndex = getRowStartIndexForOffset(\n          props,\n          scrollTop,\n          unref(cache)\n        )\n        const stopIndex = getRowStopIndexForStartIndex(\n          props,\n          startIndex,\n          scrollTop,\n          unref(cache)\n        )\n\n        const cacheBackward =\n          !isScrolling || yAxisScrollDir === BACKWARD\n            ? Math.max(1, rowCache)\n            : 1\n        const cacheForward =\n          !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1\n\n        return [\n          Math.max(0, startIndex - cacheBackward),\n          Math.max(0, Math.min(totalRow! - 1, stopIndex + cacheForward)),\n          startIndex,\n          stopIndex,\n        ]\n      })\n\n      const estimatedTotalHeight = computed(() =>\n        getEstimatedTotalHeight(props, unref(cache))\n      )\n      const estimatedTotalWidth = computed(() =>\n        getEstimatedTotalWidth(props, unref(cache))\n      )\n\n      const windowStyle = computed<StyleValue>(() => [\n        {\n          position: 'relative',\n          overflow: 'hidden',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n        },\n        {\n          direction: props.direction,\n          height: isNumber(props.height) ? `${props.height}px` : props.height,\n          width: isNumber(props.width) ? `${props.width}px` : props.width,\n        },\n        props.style ?? {},\n      ])\n\n      const innerStyle = computed(() => {\n        const width = `${unref(estimatedTotalWidth)}px`\n        const height = `${unref(estimatedTotalHeight)}px`\n\n        return {\n          height,\n          pointerEvents: unref(states).isScrolling ? 'none' : undefined,\n          width,\n        }\n      })\n\n      // methods\n      const emitEvents = () => {\n        const { totalColumn, totalRow } = props\n\n        if (totalColumn! > 0 && totalRow! > 0) {\n          const [\n            columnCacheStart,\n            columnCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n          ] = unref(columnsToRender)\n          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] =\n            unref(rowsToRender)\n          // emit the render item event with\n          // [xAxisInvisibleStart, xAxisInvisibleEnd, xAxisVisibleStart, xAxisVisibleEnd]\n          // [yAxisInvisibleStart, yAxisInvisibleEnd, yAxisVisibleStart, yAxisVisibleEnd]\n          emit(ITEM_RENDER_EVT, {\n            columnCacheStart,\n            columnCacheEnd,\n            rowCacheStart,\n            rowCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n            rowVisibleStart,\n            rowVisibleEnd,\n          })\n        }\n\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested,\n          xAxisScrollDir,\n          yAxisScrollDir,\n        } = unref(states)\n        emit(SCROLL_EVT, {\n          xAxisScrollDir,\n          scrollLeft,\n          yAxisScrollDir,\n          scrollTop,\n          updateRequested,\n        })\n      }\n\n      const onScroll = (e: Event) => {\n        const {\n          clientHeight,\n          clientWidth,\n          scrollHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth,\n        } = e.currentTarget as HTMLElement\n\n        const _states = unref(states)\n\n        if (\n          _states.scrollTop === scrollTop &&\n          _states.scrollLeft === scrollLeft\n        ) {\n          return\n        }\n\n        let _scrollLeft = scrollLeft\n\n        if (isRTL(props.direction)) {\n          switch (getRTLOffsetType()) {\n            case RTL_OFFSET_NAG:\n              _scrollLeft = -scrollLeft\n              break\n            case RTL_OFFSET_POS_DESC:\n              _scrollLeft = scrollWidth - clientWidth - scrollLeft\n              break\n          }\n        }\n\n        states.value = {\n          ..._states,\n          isScrolling: true,\n          scrollLeft: _scrollLeft,\n          scrollTop: Math.max(\n            0,\n            Math.min(scrollTop, scrollHeight - clientHeight)\n          ),\n          updateRequested: true,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n        }\n\n        nextTick(() => resetIsScrolling())\n\n        onUpdated()\n        emitEvents()\n      }\n\n      const onVerticalScroll = (distance: number, totalSteps: number) => {\n        const height = unref(parsedHeight)\n        const offset =\n          ((estimatedTotalHeight.value - height) / totalSteps) * distance\n        scrollTo({\n          scrollTop: Math.min(estimatedTotalHeight.value - height, offset),\n        })\n      }\n\n      const onHorizontalScroll = (distance: number, totalSteps: number) => {\n        const width = unref(parsedWidth)\n        const offset =\n          ((estimatedTotalWidth.value - width) / totalSteps) * distance\n        scrollTo({\n          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset),\n        })\n      }\n\n      const { onWheel } = useGridWheel(\n        {\n          atXStartEdge: computed(() => states.value.scrollLeft <= 0),\n          atXEndEdge: computed(\n            () => states.value.scrollLeft >= estimatedTotalWidth.value\n          ),\n          atYStartEdge: computed(() => states.value.scrollTop <= 0),\n          atYEndEdge: computed(\n            () => states.value.scrollTop >= estimatedTotalHeight.value\n          ),\n        },\n        (x: number, y: number) => {\n          hScrollbar.value?.onMouseUp?.()\n          hScrollbar.value?.onMouseUp?.()\n          const width = unref(parsedWidth)\n          const height = unref(parsedHeight)\n          scrollTo({\n            scrollLeft: Math.min(\n              states.value.scrollLeft + x,\n              estimatedTotalWidth.value - width\n            ),\n            scrollTop: Math.min(\n              states.value.scrollTop + y,\n              estimatedTotalHeight.value - height\n            ),\n          })\n        }\n      )\n\n      const scrollTo = ({\n        scrollLeft = states.value.scrollLeft,\n        scrollTop = states.value.scrollTop,\n      }: GridScrollOptions) => {\n        scrollLeft = Math.max(scrollLeft, 0)\n        scrollTop = Math.max(scrollTop, 0)\n        const _states = unref(states)\n        if (\n          scrollTop === _states.scrollTop &&\n          scrollLeft === _states.scrollLeft\n        ) {\n          return\n        }\n\n        states.value = {\n          ..._states,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n          scrollLeft,\n          scrollTop,\n          updateRequested: true,\n        }\n\n        nextTick(() => resetIsScrolling())\n\n        onUpdated()\n        emitEvents()\n      }\n\n      const scrollToItem = (\n        rowIndex = 0,\n        columnIdx = 0,\n        alignment: Alignment = AUTO_ALIGNMENT\n      ) => {\n        const _states = unref(states)\n        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn! - 1))\n        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow! - 1))\n        const scrollBarWidth = getScrollBarWidth()\n\n        const _cache = unref(cache)\n        const estimatedHeight = getEstimatedTotalHeight(props, _cache)\n        const estimatedWidth = getEstimatedTotalWidth(props, _cache)\n\n        scrollTo({\n          scrollLeft: getColumnOffset(\n            props,\n            columnIdx,\n            alignment,\n            _states.scrollLeft,\n            _cache,\n            estimatedWidth > props.width! ? scrollBarWidth : 0\n          ),\n          scrollTop: getRowOffset(\n            props,\n            rowIndex,\n            alignment,\n            _states.scrollTop,\n            _cache,\n            estimatedHeight > props.height! ? scrollBarWidth : 0\n          ),\n        })\n      }\n\n      const getItemStyle = (\n        rowIndex: number,\n        columnIndex: number\n      ): CSSProperties => {\n        const { columnWidth, direction, rowHeight } = props\n        const itemStyleCache = getItemStyleCache.value(\n          clearCache && columnWidth,\n          clearCache && rowHeight,\n          clearCache && direction\n        )\n        // since there was no need to introduce an nested array into cache object\n        // we use row,column to construct the key for indexing the map.\n        const key = `${rowIndex},${columnIndex}`\n\n        if (hasOwn(itemStyleCache, key)) {\n          return itemStyleCache[key]\n        } else {\n          const [, left] = getColumnPosition(props, columnIndex, unref(cache))\n          const _cache = unref(cache)\n\n          const rtl = isRTL(direction)\n          const [height, top] = getRowPosition(props, rowIndex, _cache)\n          const [width] = getColumnPosition(props, columnIndex, _cache)\n\n          itemStyleCache[key] = {\n            position: 'absolute',\n            left: rtl ? undefined : `${left}px`,\n            right: rtl ? `${left}px` : undefined,\n            top: `${top}px`,\n            height: `${height}px`,\n            width: `${width}px`,\n          }\n\n          return itemStyleCache[key]\n        }\n      }\n\n      // TODO: debounce setting is scrolling.\n\n      const resetIsScrolling = () => {\n        // timer = null\n\n        states.value.isScrolling = false\n        nextTick(() => {\n          getItemStyleCache.value(-1, null, null)\n        })\n      }\n\n      // life cycles\n      onMounted(() => {\n        // for SSR\n        if (!isClient) return\n        const { initScrollLeft, initScrollTop } = props\n        const windowElement = unref(windowRef)\n        if (windowElement) {\n          if (isNumber(initScrollLeft)) {\n            windowElement.scrollLeft = initScrollLeft\n          }\n          if (isNumber(initScrollTop)) {\n            windowElement.scrollTop = initScrollTop\n          }\n        }\n        emitEvents()\n      })\n\n      const onUpdated = () => {\n        const { direction } = props\n        const { scrollLeft, scrollTop, updateRequested } = unref(states)\n\n        const windowElement = unref(windowRef)\n        if (updateRequested && windowElement) {\n          if (direction === RTL) {\n            switch (getRTLOffsetType()) {\n              case RTL_OFFSET_NAG: {\n                windowElement.scrollLeft = -scrollLeft\n                break\n              }\n              case RTL_OFFSET_POS_ASC: {\n                windowElement.scrollLeft = scrollLeft\n                break\n              }\n              default: {\n                const { clientWidth, scrollWidth } = windowElement\n                windowElement.scrollLeft =\n                  scrollWidth - clientWidth - scrollLeft\n                break\n              }\n            }\n          } else {\n            windowElement.scrollLeft = Math.max(0, scrollLeft)\n          }\n\n          windowElement.scrollTop = Math.max(0, scrollTop)\n        }\n      }\n\n      const { resetAfterColumnIndex, resetAfterRowIndex, resetAfter } =\n        instance.proxy as any\n\n      expose({\n        windowRef,\n        innerRef,\n        getItemStyleCache,\n        scrollTo,\n        scrollToItem,\n        states,\n        resetAfterColumnIndex,\n        resetAfterRowIndex,\n        resetAfter,\n      })\n\n      // rendering part\n\n      const renderScrollbars = () => {\n        const {\n          scrollbarAlwaysOn,\n          scrollbarStartGap,\n          scrollbarEndGap,\n          totalColumn,\n          totalRow,\n        } = props\n\n        const width = unref(parsedWidth)\n        const height = unref(parsedHeight)\n        const estimatedWidth = unref(estimatedTotalWidth)\n        const estimatedHeight = unref(estimatedTotalHeight)\n        const { scrollLeft, scrollTop } = unref(states)\n        const horizontalScrollbar = h(Scrollbar, {\n          ref: hScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e('horizontal'),\n          clientSize: width,\n          layout: 'horizontal',\n          onScroll: onHorizontalScroll,\n          ratio: (width * 100) / estimatedWidth,\n          scrollFrom: scrollLeft / (estimatedWidth - width),\n          total: totalRow,\n          visible: true,\n        })\n\n        const verticalScrollbar = h(Scrollbar, {\n          ref: vScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e('vertical'),\n          clientSize: height,\n          layout: 'vertical',\n          onScroll: onVerticalScroll,\n          ratio: (height * 100) / estimatedHeight,\n          scrollFrom: scrollTop / (estimatedHeight - height),\n\n          total: totalColumn,\n          visible: true,\n        })\n\n        return {\n          horizontalScrollbar,\n          verticalScrollbar,\n        }\n      }\n\n      const renderItems = () => {\n        const [columnStart, columnEnd] = unref(columnsToRender)\n        const [rowStart, rowEnd] = unref(rowsToRender)\n        const { data, totalColumn, totalRow, useIsScrolling, itemKey } = props\n        const children: VNodeChild[] = []\n        if (totalRow > 0 && totalColumn > 0) {\n          for (let row = rowStart; row <= rowEnd; row++) {\n            for (let column = columnStart; column <= columnEnd; column++) {\n              children.push(\n                slots.default?.({\n                  columnIndex: column,\n                  data,\n                  key: itemKey({ columnIndex: column, data, rowIndex: row }),\n                  isScrolling: useIsScrolling\n                    ? unref(states).isScrolling\n                    : undefined,\n                  style: getItemStyle(row, column),\n                  rowIndex: row,\n                })\n              )\n            }\n          }\n        }\n        return children\n      }\n\n      const renderInner = () => {\n        const Inner = resolveDynamicComponent(props.innerElement) as VNode\n        const children = renderItems()\n        return [\n          h(\n            Inner,\n            {\n              style: unref(innerStyle),\n              ref: innerRef,\n            },\n            !isString(Inner)\n              ? {\n                  default: () => children,\n                }\n              : children\n          ),\n        ]\n      }\n\n      const renderWindow = () => {\n        const Container = resolveDynamicComponent(\n          props.containerElement\n        ) as VNode\n        const { horizontalScrollbar, verticalScrollbar } = renderScrollbars()\n        const Inner = renderInner()\n\n        return h(\n          'div',\n          {\n            key: 0,\n            class: ns.e('wrapper'),\n          },\n          [\n            h(\n              Container,\n              {\n                class: props.className,\n                style: unref(windowStyle),\n                onScroll,\n                onWheel,\n                ref: windowRef,\n              },\n              !isString(Container) ? { default: () => Inner } : Inner\n            ),\n            horizontalScrollbar,\n            verticalScrollbar,\n          ]\n        )\n      }\n\n      return renderWindow\n    },\n  })\n}\n\nexport default createGrid\n\ntype Dir = typeof FORWARD | typeof BACKWARD\n\nexport type GridInstance = InstanceType<ReturnType<typeof createGrid>> &\n  UnwrapRef<{\n    windowRef: Ref<HTMLElement>\n    innerRef: Ref<HTMLElement>\n    getItemStyleCache: ReturnType<typeof useCache>\n    scrollTo: (scrollOptions: GridScrollOptions) => void\n    scrollToItem: (\n      rowIndex: number,\n      columnIndex: number,\n      alignment: Alignment\n    ) => void\n    states: Ref<{\n      isScrolling: boolean\n      scrollLeft: number\n      scrollTop: number\n      updateRequested: boolean\n      xAxisScrollDir: Dir\n      yAxisScrollDir: Dir\n    }>\n  }>\n"]},"metadata":{},"sourceType":"module"}